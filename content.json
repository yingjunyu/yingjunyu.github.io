{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"https://yingjunyu.github.io","root":"/"},"pages":[],"posts":[{"title":"一个完整的Flutter新闻客户端程序","slug":"一个完整的Flutter新闻客户端程序","date":"2020-05-03T09:08:15.000Z","updated":"2020-05-03T09:19:09.420Z","comments":true,"path":"2020/05/03/一个完整的Flutter新闻客户端程序/","link":"","permalink":"https://yingjunyu.github.io/2020/05/03/一个完整的Flutter新闻客户端程序/","excerpt":"","text":"1.目标：1).首页滚动新闻2).首页显示10条新闻，下拉刷新，上滑加载更多3).调用原生浏览器打开新闻详细页面4).可以添加收藏、删除收藏、显示收藏5).新闻分类访问2.技术：1).使用免费的API接口从网络获取数据，本例采用api.tianapi.com2).网络访问，json解析3).shared_preferences保存本地数据，fluttertoast显示对话框4).flutter_native_web调用原生webview显示新闻详细内容3.具体实现：1).具体代码已上传至github，地址是：https://github.com/yingjunyu/flutter_news_app2).详细实现就不累述了，其实也是最基本flutter技术，贴上主界面图一张","categories":[],"tags":[{"name":"FLUTTER","slug":"FLUTTER","permalink":"https://yingjunyu.github.io/tags/FLUTTER/"}]},{"title":"分享一次参加“教练型”领导培训的心得","slug":"分享一次参加“教练型”领导培训的心得","date":"2020-05-03T09:05:37.000Z","updated":"2020-05-03T09:21:12.839Z","comments":true,"path":"2020/05/03/分享一次参加“教练型”领导培训的心得/","link":"","permalink":"https://yingjunyu.github.io/2020/05/03/分享一次参加“教练型”领导培训的心得/","excerpt":"","text":"分享一下近期参加一次“教练型”领导培训的内容，个人觉得还是比较有道理的，贴图两张，其他不累述","categories":[],"tags":[{"name":"其他","slug":"其他","permalink":"https://yingjunyu.github.io/tags/其他/"}]},{"title":"使用Flutter构建卡片式页面布局","slug":"使用Flutter构建卡片式页面布局","date":"2020-01-07T15:48:24.000Z","updated":"2020-01-07T16:02:32.951Z","comments":true,"path":"2020/01/07/使用Flutter构建卡片式页面布局/","link":"","permalink":"https://yingjunyu.github.io/2020/01/07/使用Flutter构建卡片式页面布局/","excerpt":"","text":"本次的目标是使用Flutter构建如下的页面布局（也是常见的页面布局样式） 实现步骤1.准备数据文件，准备一个如下图所示的数据文件，将其保存为dart文件，例如listData.dart 2.开始编写主程序，这里直接贴上实现的代码，如下图所示 在上述代码中主要用到了：a).ListView组件：循环生成列表，通过ListView组件下的ListTile来生成标题及说明b).CircleAvatar组件：生成圆形头像c).Image组件：加载图片d).Card组件：生成卡片效果e).AspectRatio组件：控制主图片的长宽比f).Column组件：控制按照行的方式显示内容","categories":[],"tags":[{"name":"FLUTTER","slug":"FLUTTER","permalink":"https://yingjunyu.github.io/tags/FLUTTER/"}]},{"title":"Flutter与其他混合开发框架的对比","slug":"Flutter与其他混合开发框架的对比","date":"2019-11-30T14:58:23.000Z","updated":"2019-11-30T15:06:02.991Z","comments":true,"path":"2019/11/30/Flutter与其他混合开发框架的对比/","link":"","permalink":"https://yingjunyu.github.io/2019/11/30/Flutter与其他混合开发框架的对比/","excerpt":"","text":"主要借鉴了网上的一篇文章，自己也体会了一下，对比其他的混合框架我觉得主要优点是：1.多数的混合框架都是通过js桥接器来与native连接，在渲染速度方面感觉不是太好（当然我自己也研究不深），Flutter没有使用JavaScript桥接器来与native连接，自有一个2D渲染引擎。怎么说呢，个人觉得flutter自己的渲染引擎比起webview还是要快一些。2.利用Android Studio3作为IDE开发工具比较方便，同时也是google支持的，用来开发Android程序我觉得还是不错的。当然Flutter坑也不少，在搭建开发环境的时候还是很折腾了一下，简单谈谈看法，做个记录。见笑了。附上简书文章的网址：https://ask.dcloud.net.cn/article/36083","categories":[],"tags":[{"name":"FLUTTER","slug":"FLUTTER","permalink":"https://yingjunyu.github.io/tags/FLUTTER/"}]},{"title":"第一个Flutter程序","slug":"第一个Flutter程序","date":"2019-11-30T14:49:14.000Z","updated":"2019-11-30T15:08:10.061Z","comments":true,"path":"2019/11/30/第一个Flutter程序/","link":"","permalink":"https://yingjunyu.github.io/2019/11/30/第一个Flutter程序/","excerpt":"","text":"一时兴起，看一下google自己退出的混合开发语言flutter，对照着网上的文档做了一个程序，主要做了：1.从头开始创建一个Flutter应用程序.2.编写 Dart 代码.3.利用外部的第三方库.4.使用热重载加快开发周期.5.实现一个有状态的widget，为你的应用增加交互.6.用ListView和ListTiles创建一个延迟加载的无限滚动列表.7.创建了一个路由并添加了在主路由和新路由之间跳转逻辑8.了解如何使用主题更改应用UI的外观.以下是成品的效果图： 用Android Studio3作为开发用的IDE，还是比较方便的，貌似加载速度也还比较快，最后附上教程网址：https://flutterchina.club/docs","categories":[],"tags":[{"name":"FLUTTER","slug":"FLUTTER","permalink":"https://yingjunyu.github.io/tags/FLUTTER/"}]},{"title":"WTG制作","slug":"WTG制作","date":"2019-11-26T00:52:10.000Z","updated":"2019-11-26T00:58:32.108Z","comments":true,"path":"2019/11/26/WTG制作/","link":"","permalink":"https://yingjunyu.github.io/2019/11/26/WTG制作/","excerpt":"","text":"1、首先下载你需要的Windows系统2、打开WTG辅助工具 3、点击“浏览”选择你刚下载的Windows 10系统安装包，（系统下载后不用解压）4、在“请选择可移动设备”中选择你的U盘，这里推荐支持usb3.0以上版本的U盘，速度会快许多。以后使用的时候，开机的速度也会更快。5、在“高级选项”当中，我们可以选择默认的配置，“传统”、“VHD”、“VHDX”，这三者的区别。如果你的U盘插到电脑里面显示的是移动硬盘的话，那么就只能使用“VHD”、“VHDX”这两个模式下方的子内容，默认勾选的是”UEFI+MBR”分区，如果你的电脑是品牌机型的话，软件则会自动帮你选择“UEFI+GPT”。big君还是推荐你使用“UEFI+MBR”格式。后面放到其他的电脑上面使用的话，不用设置那么多的内容WTG默认是屏蔽了本机硬盘的，big君也推荐使用这个默认的设置，因为Windows系统的同名文件，会存在相互引用的情况，所以为了不出现损坏他人系统的情况下，推荐勾选这一项。当然，如果你有需求需要看到其他电脑系统目录当中的文件的话，可以打开“磁盘管理”在里面找到电脑上的本地系统盘，鼠标右键勾选“联机”就可以在资源管理器当中显示的最后推荐大家勾选“..NET 3.5”这个选项，毕竟如果你的电脑有一些软件还是会需要用到.NET 3.5这个系统扩展的6、完成以上的设置以后，选择“自动选择安装分卷”如果你下载的系统是多版本的话，这里会罗列这个景象文件的所有系统版本类型，比如big君这次提供的系统，里面则存在多个版本，安装Windows 专业版，可以直接点选“Windows pro”7、完成以上的所有设置以后，直接点击“部署”，会弹出一个提示弹窗，这里我们需要等待“4秒”钟的时间，以方便自己检测自己的设置是否存在失误 8、设置部分就算是完成了，现在需要做的就是等待软件将你的U盘制作成“WTG”，过程蛮久的，根据你的硬盘实际写入速度来定。这里补充一点，当你使用默认的“传统”模式制作“WTG”的话，过程会比其他两种模式快许多倍，但鉴于现在大部分同学都使用的是硬盘盒子加固态硬盘来制作“wtg”这里还是推荐大家使用“VHDX”模式制作。过程需要大概半个小时的样子","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://yingjunyu.github.io/tags/操作系统/"}]},{"title":"一个比较完整的Scrapy爬虫","slug":"一个比较完整的Scrapy爬虫","date":"2019-11-10T08:14:25.000Z","updated":"2019-11-10T14:00:22.160Z","comments":true,"path":"2019/11/10/一个比较完整的Scrapy爬虫/","link":"","permalink":"https://yingjunyu.github.io/2019/11/10/一个比较完整的Scrapy爬虫/","excerpt":"","text":"1.目标：爬取新浪财经新闻——国际财经——亚洲动态栏目下的全部新闻内容2.技术：选用Scrapy框架完成工作3.具体实现：1).创建项目，创建爬虫。（不会的自行百度）2).修改settings.py文件，修改设置，主要包括：启用并修改USER_AGENT，设置LOG日志级别为WARNING，启用DOWNLOAD_DELAY，启用pipelines 3).编写items 4).开始编写爬虫内容，具体来说包括三个部分：第一爬取列表页面内容，第二爬取内容页面内容（本例未做精细化处理），第三处理翻页，分别如以下三图所示：爬取列表页面内容——爬取内容页面内容（本例未做精细化处理）——处理翻页—— 5).在pipelines中处理爬取数据后的工作，本例仅仅只做打印输出 4.运行爬虫：通过scrapy crawl sinafinace 命令运行本例爬虫，应该可以看到如下的输出界面","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"一次失败的爬虫程序","slug":"一次失败的爬虫程序","date":"2019-10-26T01:41:34.000Z","updated":"2019-10-26T01:57:01.766Z","comments":true,"path":"2019/10/26/一次失败的爬虫程序/","link":"","permalink":"https://yingjunyu.github.io/2019/10/26/一次失败的爬虫程序/","excerpt":"","text":"前几天在编制一个新闻展示程序的时候，突发奇想的想把那个新闻网站的内容爬到本地，于是就开始动手，通过scrapy来完成这项工作。源端网站是一个json格式返回的信息，按照道理说非常简单，只需要通过类似如下的代码就可以逐项解析，并保存到数据了1234567891011class Cm163Spider(scrapy.Spider): name = &apos;cm163&apos; allowed_domains = [&apos;http://c.3g.163.com&apos;] start_urls = [&apos;http://c.3g.163.com/nc/article/headline/T1348647853363/0-140.html/&apos;] def parse(self, response): # 调用body_as_unicode()是为了能处理unicode编码的数据 news163 = json.loads(response.body_as_unicode()) #print sites[&apos;k&apos;] n_title = news163[&apos;title&apos;].split(&apos;,&apos;) print(n_title) 实际运行的时候服务器先是返回403，这个好办，直接在settings.py里面设置head就好，设置完成后403错误没有了，但是出现了202错误，通过在网上查了一下，大致是如下图所示的情况： 继续去查，找到了一些解决的方法，不过目前暂时都没有成功，看样子只有考虑用代理IP的方式解决吗？还在努力尝试中。最后附上几个我找到的资料网址，感谢这些作者：https://blog.csdn.net/qq_34162294/article/details/72353406https://chenjiabing666.github.io/2017/03/25/scrapy%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%99%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/https://chenjiabing666.github.io/2017/03/26/scrapy%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86ip/https://blog.csdn.net/sixkery/article/details/82726177https://blog.csdn.net/sixkery/article/details/82724591","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"vscode快捷键","slug":"vscode快捷键","date":"2019-10-26T01:34:57.000Z","updated":"2019-10-26T01:56:52.953Z","comments":true,"path":"2019/10/26/vscode快捷键/","link":"","permalink":"https://yingjunyu.github.io/2019/10/26/vscode快捷键/","excerpt":"","text":"","categories":[],"tags":[{"name":"IDE","slug":"IDE","permalink":"https://yingjunyu.github.io/tags/IDE/"}]},{"title":"studio升级后gradle报错问题","slug":"studio升级后gradle报错问题","date":"2019-10-23T13:39:25.000Z","updated":"2019-10-23T13:44:49.190Z","comments":true,"path":"2019/10/23/studio升级后gradle报错问题/","link":"","permalink":"https://yingjunyu.github.io/2019/10/23/studio升级后gradle报错问题/","excerpt":"","text":"近日将Android Studio升级到了3.5.1，结果在编译程序时都会报gradle的错误 提示的信息类似于：Could not find com.android.tools.build:gradle:3.0.1 最终的解决方法是，增加google()，如下图所示中文注释的地方 增加以后就可以正常编译程序了","categories":[],"tags":[{"name":"ANDROID","slug":"ANDROID","permalink":"https://yingjunyu.github.io/tags/ANDROID/"}]},{"title":"Django缓存系统","slug":"Django缓存系统","date":"2019-10-22T09:08:01.000Z","updated":"2019-10-22T09:13:13.441Z","comments":true,"path":"2019/10/22/Django缓存系统/","link":"","permalink":"https://yingjunyu.github.io/2019/10/22/Django缓存系统/","excerpt":"","text":"最近在学习Django2的缓存系统，对于缓存系统有了一定的认识，也在做例子的时候用到了这方面的知识，偷个懒，直接网页截图了，:)","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"ionic4集成高德地图","slug":"ionic4集成高德地图","date":"2019-09-26T15:27:42.000Z","updated":"2019-09-26T15:38:27.345Z","comments":true,"path":"2019/09/26/ionic4集成高德地图/","link":"","permalink":"https://yingjunyu.github.io/2019/09/26/ionic4集成高德地图/","excerpt":"","text":"一：key首先去高德开发者平台注册一个账号，然后在申请一个key。需要注意的是获取安全码SHA1和PackageName 1：获取SHA1打开cmd，目录定位在c盘/users/用户名文件/.android,然后输入输入命令 1keytool -list -v -keystore debug.keystore 像这样： 你可能会报错：密钥库文件不存在: debug.keystore， 你可以打开系统User下的.android文件夹，看看有没有debug.keystore文件，如果没有这个文件可以看一下下面这个文章：https://blog.csdn.net/zhangxing52077/article/details/53997893 有了debug.keystore文件之后，重新输入命令 注意，他会提醒你输入秘钥库口令，口令是：android 2：PackageNamepackageName这个是包名，在项目里config.xml文件里面获取 二：代码1：在项目src目录下的index.html页面引入script1&lt;script type=&quot;text/javascript&quot; src=&quot;http://webapi.amap.com/maps?v=1.4.1&amp;key=你的key&quot;&gt;&lt;/script&gt; 2:html123&lt;ion-content&gt; &lt;div #map_container class=&quot;map_container&quot;&gt;&lt;/div&gt;&lt;/ion-content&gt; 3:css1234567body,.map_container &#123; width: 100%; height: 600px; overflow:hidden; margin:0; z-index:1000 &#125; 4:ts1234567891011121314151617181920212223import &#123;AlertController&#125; from &apos;@ionic/angular&apos;;declare var AMap;@Component(&#123; selector: &apos;app-home&apos;, templateUrl: &apos;home.page.html&apos;, styleUrls: [&apos;home.page.scss&apos;]&#125;)export class HomePage &#123; @ViewChild(&apos;map_container&apos;) map_container: ElementRef; map: any;//地图对象 constructor(public alertController: AlertController) &#123;&#125; ionViewDidEnter() &#123; this.map = new AMap.Map(this.map_container.nativeElement, &#123; view: new AMap.View2D(&#123;//创建地图二维视图 zoom: 11, //设置地图缩放级别 rotateEnable: true, showBuildingBlock: true &#125;) &#125;); &#125;&#125; 就可以显示地图了。 参考文章：https://blog.csdn.net/weixin_39461487/article/details/79798471","categories":[],"tags":[{"name":"IONIC","slug":"IONIC","permalink":"https://yingjunyu.github.io/tags/IONIC/"}]},{"title":"ionic4路由跳转","slug":"ionic4路由跳转","date":"2019-09-26T15:12:07.000Z","updated":"2019-09-26T15:20:06.490Z","comments":true,"path":"2019/09/26/ionic4路由跳转/","link":"","permalink":"https://yingjunyu.github.io/2019/09/26/ionic4路由跳转/","excerpt":"","text":"1.普通路由跳转 2.路由跳转传值 图解 3.NavController 返回上一页Ionic4.x 中从 tabs 切换页面跳转到其他页面，使用 ion-back-button 返回的话，默认都会返回到 tab1 页面。如果我们想从那个 tab 页面跳转过去就返回到指定的 tab 页面的话，这时候就要用到 NavController 里面提到的 back 方法。 完整代码 4.NavController 回到根","categories":[],"tags":[{"name":"IONIC","slug":"IONIC","permalink":"https://yingjunyu.github.io/tags/IONIC/"}]},{"title":"Anaconda常用的简单命令","slug":"Anaconda常用的简单命令","date":"2019-09-26T15:07:37.000Z","updated":"2019-09-26T15:09:57.824Z","comments":true,"path":"2019/09/26/Anaconda常用的简单命令/","link":"","permalink":"https://yingjunyu.github.io/2019/09/26/Anaconda常用的简单命令/","excerpt":"","text":"Anaconda常用的简单命令conda info -e 查看当前虚拟环境conda create python36 创建了python36的虚拟环境activate python36 激活python36的虚拟环境conda list 查看已经安装的包conda install package_name 安装一些包，其中package_name为包的名字conda remove package_name 删除一些包，其中package_name为包的名字conda update package_name 更新一些包，其中package_name为包的名字conda search package_name 查找一些包，其中package_name为包的名字conda remove python36 删除虚拟环境","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"xpath语法","slug":"xpath语法","date":"2019-09-25T17:25:10.000Z","updated":"2019-09-26T15:23:56.994Z","comments":true,"path":"2019/09/26/xpath语法/","link":"","permalink":"https://yingjunyu.github.io/2019/09/26/xpath语法/","excerpt":"","text":"1.选取节点“/” 如果是在最前面，代表从根节点选取，否则选择某节点下的某个节点.只查询子一辈的节点123/html 查询到一个结果/div 查询到0个结果，因为根节点以下只有一个html子节点/html/body 查询到1个结果 “//” 查询所有子孙节点12//head/script//div “.” 选取当前节点“..” 选取当前节点的父节点“@” 选取属性12//div[@id] 选择所有带有id属性的div元素&lt;div id=&quot;sidebar&quot; class=&quot;sidebar&quot; data-lg-tj-track-code=&quot;index_navigation&quot; data-lg-tj-track-type=&quot;1&quot;&gt; 2.谓语谓语是用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。1234567//body/div[1] body下的第一个div元素//body/div[last()] body下的最后一个div元素//body/div[position()&lt;3] body下的位置小于3的元素//div[@id] div下带id属性的元素&lt;div id=&quot;sidebar&quot; class=&quot;sidebar&quot; data-lg-tj-track-code=&quot;index_navigation&quot; data-lg-tj-track-type=&quot;1&quot;&gt;//input[@id=&quot;serverTime&quot;]input下id=&quot;serverTime&quot;的元素 模糊匹配123456//div[contains(@class,&apos;f1&apos;)] div的class属性带有f1的通配符 *//body/* body下面所有的元素//div[@*] 只要有用属性的div元素//div[@id=&apos;footer&apos;] //div 带有id=&apos;footer&apos;属性的div下的所有div元素//div[@class=&apos;job_bt&apos;] //dd[@class=&apos;job-advantage&apos;] 运算符12345//div[@class=&apos;job_detail&apos;] and @id=&apos;job_tent&apos;//book/title | //book/price 选取 book 元素的所有 title 和 price 元素。也可以百度搜索XPath语法.//a/text() 当前标签下所有a标签的文字内容//tr[position()&gt;1 and position()&lt;11] 位置大于1小于11 3.需要注意的知识点123451./和//的区别：/代表子节点，//代表子孙节点，//用的比较多2.contains有时候某个属性中包含了多个值，那么使用contains函数//div[contains(@class,&apos;lg&apos;)]3.谓语中的下标是从1开始的，不是从0开始的 最后注明引用和参考的网址https://www.cnblogs.com/xufengnian/p/10788195.htmlhttps://www.w3school.com.cn/xpath/xpath_syntax.asp","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"20190819-Scrapy学习-爬取基金基本信息和Logging使用","slug":"20190819-Scrapy学习-爬取基金基本信息和Logging使用","date":"2019-08-19T15:15:05.000Z","updated":"2019-08-19T15:22:11.585Z","comments":true,"path":"2019/08/19/20190819-Scrapy学习-爬取基金基本信息和Logging使用/","link":"","permalink":"https://yingjunyu.github.io/2019/08/19/20190819-Scrapy学习-爬取基金基本信息和Logging使用/","excerpt":"","text":"本次以爬取基金的编码、名称、净值和净值日期做为爬取目标（暂不涉及翻页），目标网址是：http://fund.eastmoney.com/trade/hh.html?spm=001.1.swh#zwf_,sc_1n,st_desc，同时对Logging模块的使用进行初步学习，学习记录如下1、创建工程dfcf，scrapy startproject dfcf2、创建爬虫getfund，scrapy genspider getfund fund.eastmoney3、修改getfund代码，本次学习代码如下 这里主要用到了xpath的知识，同时借助浏览器的开发者模式，对于dom树形结构进行分析4、修改settings.py打开logging和启用pipline，修改pipline.py进行输出等操作，其中settings.py本次学习代码如下 piplines.py本次学习代码如下 5、最后执行一下这个爬虫，scrapy crawl getfund，正常情况下应该会打印爬取结果，同时会在根目录下生成fund.log日志文件6、最后贴上总结的截图及Logging的应用截图","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"Django2使用XAdmin管理后台内容","slug":"Django2使用XAdmin管理后台内容","date":"2019-08-18T15:11:29.000Z","updated":"2019-08-18T15:14:43.514Z","comments":true,"path":"2019/08/18/Django2使用XAdmin管理后台内容/","link":"","permalink":"https://yingjunyu.github.io/2019/08/18/Django2使用XAdmin管理后台内容/","excerpt":"","text":"Django2使用XAdmin管理后台内容基本步骤和用django自带的admin差不多，也是通过类似于admin.sites.regitser方法来实现，具体分为以下几步：1、首先要实现django2与xadmin的集成，这个看之前的笔记2、在app的目录下，建立adminx.py文件，然后注册，本次学习的代码如下： 以上的代码，比较好理解，只是使用xadmin管理后台页面，一定要有list_display，search_fiedls和list_filter三个参数。完成以上两步就可以完成xadmin管理后台页面的功能，以下附上效果图 页面效果还是比较漂亮的，比自带的admin要好看一些","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"Django2动态渲染页面学习","slug":"Django2动态渲染页面学习","date":"2019-08-18T15:02:57.000Z","updated":"2019-08-18T15:11:04.924Z","comments":true,"path":"2019/08/18/Django2动态渲染页面学习/","link":"","permalink":"https://yingjunyu.github.io/2019/08/18/Django2动态渲染页面学习/","excerpt":"","text":"Django2动态渲染页面学习1、Django2动态渲染页面学习 本次学习使用sqlite3数据库，因此不需要修改settings.py文件的数据连接配置。然后进行数据库创建，使用命令：python manage.py makemigrations和python manage.py migrate即可，不过在执行上述命令的使用碰到了一个问题，就是num_count字段始终提示缺少缺省值之类的错误，碰到这种情况可以按照如下的方式解决：1）首先修改models.py文件，修改为：num_count=models.FloatField(default=999)，然后执行一次数据库创建，此时应该可以成功；2）然后修改models.py文件，再改回来，然后再执行一次数据库创建，此时就不会有问题了2、修改views.py文件，从数据库取数并动态渲染，本次学习编码如下： 其中：1）from .models import ANum是引入第一步建立的数据模型；2）render是用来渲染的函数，指向index.html文件（在templates文件夹下）3、修改html文件，在页面显示动态渲染的数据，本次学习编码如下： 4、以上三步就完成了django的动态渲染，以下是效果图部分（仅显示动态渲染的页面部分），这个完整的效果就显示了一个完整的django的mtv开发方式","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"Django2初步使用-静态文件加载-20190801","slug":"Django2初步使用-静态文件加载-20190801","date":"2019-08-01T09:32:16.000Z","updated":"2019-08-01T09:42:01.564Z","comments":true,"path":"2019/08/01/Django2初步使用-静态文件加载-20190801/","link":"","permalink":"https://yingjunyu.github.io/2019/08/01/Django2初步使用-静态文件加载-20190801/","excerpt":"","text":"Django2初步使用-静态文件加载1、在django project中创建 static文件夹，需要在工程的根目录自己创建static文件夹2、在工程的settings.py中配置，如下图所示： 3、前端引入，例如index.html文件，如下图所示： 4、完成以上几步以后，在views.py里面就可以用render方法进行渲染，配置好urls路径后就可以正常显示。最后感谢简书作者文章，附上链接：https://www.jianshu.com/p/bb9ae71f4a7b附上项目的效果图如下：","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"XAdmin与Django2集成体会","slug":"XAdmin与Django2集成体会","date":"2019-07-25T09:16:21.000Z","updated":"2019-07-25T09:36:28.939Z","comments":true,"path":"2019/07/25/XAdmin与Django2集成体会/","link":"","permalink":"https://yingjunyu.github.io/2019/07/25/XAdmin与Django2集成体会/","excerpt":"","text":"XAdmin与Django集成体会xadmin是比较符合国人习惯的一个后台管理的界面，在与django2集成的时候还是碰到了很多问题，不过后来都解决，现在简单列一下： 1、安装：网上这方面的文档比较多，比较靠谱的还是github上作者自己写的安装方法：pip install:https://codeload.github.com/sshwsfc/xadmin/zip/django2。 附上作者的github地址：https://github.com/sshwsfc/xadmin 2、配置：主要修改的地方一个是setting.py和urls.pysettiong.py修改如下 urls.py修改如下： 3、应用：首先执行 python manage.py migrate命令，然后就可以启动服务器了，python manage.py runserver。再就是进入后台管理界面，大致能看到如下风格的界面效果： 4、xadmin的bug问题：在应用过程中碰到了添加用户小插件报错的情况，查了资料以后主要需要修改site-packages\\xadmin\\views下的dashboard.py中的render方法，具体改成下面的内容： 以上就是集成以后的总结，基本上来说，后续的应用网上的文章很多，官方也有自己的文档，参照来做即可。","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"Scrapy初步使用","slug":"Scrapy初步使用","date":"2019-07-24T09:37:40.000Z","updated":"2019-07-24T10:00:33.659Z","comments":true,"path":"2019/07/24/Scrapy初步使用/","link":"","permalink":"https://yingjunyu.github.io/2019/07/24/Scrapy初步使用/","excerpt":"","text":"Scrapy初步使用","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"Cordova 插件大全","slug":"插件大全","date":"2018-12-17T09:16:21.000Z","updated":"2018-12-17T09:23:02.583Z","comments":true,"path":"2018/12/17/插件大全/","link":"","permalink":"https://yingjunyu.github.io/2018/12/17/插件大全/","excerpt":"","text":"cordova 插件大全https://www.jianshu.com/p/642c9be55446","categories":[],"tags":[{"name":"IONIC","slug":"IONIC","permalink":"https://yingjunyu.github.io/tags/IONIC/"}]},{"title":"Django2初步使用-20181217","slug":"Django2初步使用-20181217","date":"2018-12-17T01:28:32.000Z","updated":"2018-12-17T02:38:10.346Z","comments":true,"path":"2018/12/17/Django2初步使用-20181217/","link":"","permalink":"https://yingjunyu.github.io/2018/12/17/Django2初步使用-20181217/","excerpt":"","text":"Django2初步使用之前跟着教程学习过Django1的使用，对于路由、分库什么的都没有做深入研究。说来惭愧，现在真的是浅尝即止。话虽如此，还是腆着脸来写一下这段时间初步尝试Django2的一些体会，见笑了。 1. Django2的路由这点我比较喜欢，之前的Django1只能用正则表达式的方式来写，虽说正则表达式看上去不难，但是我自己觉得比较晦涩，不太喜欢这种表达方式（除非是做爬虫），Django2在这方面有了选择，可以采用 path(‘index/‘, index) 的方式，有了这种方式，至少对我来说感觉方便了很多。至于路由的选择依然是MTV模式，没有什么改变。 2. 多应用分库这是在实际生产中必然会用到的，其实应该和Django1一样，只不过在之前的自学中自己没有去实践过，在这次的学习中实践了一下，所以就写在这里了，大致来说的步骤是： 1 用manange.py生成应用，并且在settings.py的install_app小节注册一下新建的的应用。 2 在urls.py里面引入生成的应用view类，然后配置路由（更好的做法自然应该是在应用下面配置urls，然后引入。） 3 可选步骤，一般情况下，执行完上述步骤后就可以完成多应用分库的操作，只不过这时的template目录是在站点的根目录下的，如果想每个独立的应用都有自己的template文件夹的话，需要做一是将template文件夹移到应用的根目录下，然后还需要修改站点的settings.py里面的内容，在’DIRS’:后面写上如下的内容。 1234TEMPLATES = [ &#123; &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;, &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates/&apos;)] 当然还可以做的更好，就是把所有的应用统一放到一个目录下，比如apps目录，这需要继续修改settings.py关于路径的设置内容。不过这个没有实践，就不写了。 3. 编辑器Ckeditor的使用这个编辑器做为一般建站可能都会用上吧，大致的使用步骤是： 1 安装，pip install django-ckeditor 需要上传图片的话，还需要安装pillow。 2 在settings.py里设置，需要设置的内容是：1） 在install_app小节里面增加 ‘ckeditor_uploader’和’ckeditor’ 内容，前者用来上传图片、多媒体文件等用。 2） 增加如下的配置代码 123456789101112131415161718192021222324CKEDITOR_JQUERY_URL =&apos;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&apos;CKEDITOR_IMAGE_BACKEND = &apos;pillow&apos;CKEDITOR_UPLOAD_PATH = &apos;uploads/&apos;# Static files (CSS, JavaScript, Images)# https://docs.djangoproject.com/en/2.0/howto/static-files/CKEDITOR_CONFIGS = &#123; &apos;default&apos;: &#123; &apos;toolbar&apos;: ( [&apos;div&apos;,&apos;Source&apos;,&apos;-&apos;,&apos;Save&apos;,&apos;NewPage&apos;,&apos;Preview&apos;,&apos;-&apos;,&apos;Templates&apos;], [&apos;Cut&apos;,&apos;Copy&apos;,&apos;Paste&apos;,&apos;PasteText&apos;,&apos;PasteFromWord&apos;,&apos;-&apos;,&apos;Print&apos;,&apos;SpellChecker&apos;,&apos;Scayt&apos;], [&apos;Undo&apos;,&apos;Redo&apos;,&apos;-&apos;,&apos;Find&apos;,&apos;Replace&apos;,&apos;-&apos;,&apos;SelectAll&apos;,&apos;RemoveFormat&apos;], [&apos;Form&apos;,&apos;Checkbox&apos;,&apos;Radio&apos;,&apos;TextField&apos;,&apos;Textarea&apos;,&apos;Select&apos;,&apos;Button&apos;, &apos;ImageButton&apos;,&apos;HiddenField&apos;], [&apos;Bold&apos;,&apos;Italic&apos;,&apos;Underline&apos;,&apos;Strike&apos;,&apos;-&apos;,&apos;Subscript&apos;,&apos;Superscript&apos;], [&apos;NumberedList&apos;,&apos;BulletedList&apos;,&apos;-&apos;,&apos;Outdent&apos;,&apos;Indent&apos;,&apos;Blockquote&apos;], [&apos;JustifyLeft&apos;,&apos;JustifyCenter&apos;,&apos;JustifyRight&apos;,&apos;JustifyBlock&apos;], [&apos;Link&apos;,&apos;Unlink&apos;,&apos;Anchor&apos;], [&apos;Image&apos;,&apos;Flash&apos;,&apos;Table&apos;,&apos;HorizontalRule&apos;,&apos;Smiley&apos;,&apos;SpecialChar&apos;,&apos;PageBreak&apos;], [&apos;Styles&apos;,&apos;Format&apos;,&apos;Font&apos;,&apos;FontSize&apos;], [&apos;TextColor&apos;,&apos;BGColor&apos;], [&apos;Maximize&apos;,&apos;ShowBlocks&apos;,&apos;-&apos;,&apos;About&apos;, &apos;pbckcode&apos;], ), &#125;&#125; 上面的congfig代码是我找的网上的例子，默认情况下的ck是不会打开媒体文件上传的选项的，需要在congfig里面配置，具体是哪一行起作用，没有研究，不敢乱说。 除此之外，还需要对static路径和media路径进行设置，代码如下： 123456789STATIC_URL = &apos;/static/&apos;#STATIC_ROOT = os.path.join(BASE_DIR,&apos;static/&apos;)STATICFILES_DIRS = ( os.path.join(BASE_DIR, &quot;static&quot;),)MEDIA_URL = &apos;/media/&apos;MEDIA_ROOT = os.path.join(BASE_DIR, &quot;media&quot;)#CKEDITOR_UPLOAD_PATH = &apos;uploads/&apos; 上面的代码其实和django1使用ck差不多。 3） 同步静态文件，用 python manage.py collectstatic 命令同步静态文件。完成上述步骤后，就可以测试一下效果，如果代码都写的没问题，站点也可以跑起来的话，多半会有一个问题，就是图片上传成功，但是在ck编辑器内和页面上都无法显示，反正我是碰到了这个问题的，就算从github上面下载的完整的例子也有这个问题。最后还是求助网络和ck的官方文档，还需要在 urlpatterns = [……] 的最后写上 + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)就可以了。 4. 和Pyecharts的集成首先来说，这个是有官方帮助可以看的，例子也写得比较详细。这里就不赘述了，我自己实践的时候只是碰到了一个问题，就是某个页面上有其他内容的时候，直接放上官方文档的例子没有任何效果，没有深入研究什么原因，我采取了比较简单粗暴的解决方法，直接用了一个iframe加载。 大概就是以上这几点吧，也没做太多的实践，不敢多写，就先到这吧。:)","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"利用pyecharts制作图表","slug":"利用pyecharts制作图表","date":"2018-08-16T02:55:23.000Z","updated":"2018-08-16T03:07:33.560Z","comments":true,"path":"2018/08/16/利用pyecharts制作图表/","link":"","permalink":"https://yingjunyu.github.io/2018/08/16/利用pyecharts制作图表/","excerpt":"","text":"利用Pyecharts制作图表pyecharts是基于Echart图表的一个类库，主要基于Web浏览器进行显示，绘制的图形比较多，包括折线图、柱状图、饼图、漏斗图、地图、极坐标图等，代码量少，而且很灵活，绘制出来的图形也很美观。 1. 安装pyecharts1pip install pyecharts 2. 一般性应用（制作柱状图为例）1234567from pyecharts import Barattr = [&apos;JAVA&apos;, &apos;C++&apos;, &apos;C#&apos;, &apos;PYTHONE&apos;]value = [&apos;100&apos;, &apos;120&apos;, &apos;85&apos;, &apos;150&apos;]bar = Bar(&quot;柱状图&quot;, &quot;应用率&quot;)bar.add(&quot;编程语言&quot;, attr, value, is_label_show=True)bar.render() 以上代码在执行以后会在代码所在的目录下生成一个render.html文件，在浏览器里打开这个文件就可以看到一个柱状图的效果了。","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]}]}