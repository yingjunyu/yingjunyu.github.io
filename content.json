{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"https://yingjunyu.github.io","root":"/"},"pages":[],"posts":[{"title":"Django2初步使用-静态文件加载-20190801","slug":"Django2初步使用-静态文件加载-20190801","date":"2019-08-01T09:32:16.000Z","updated":"2019-08-01T09:42:01.564Z","comments":true,"path":"2019/08/01/Django2初步使用-静态文件加载-20190801/","link":"","permalink":"https://yingjunyu.github.io/2019/08/01/Django2初步使用-静态文件加载-20190801/","excerpt":"","text":"Django2初步使用-静态文件加载1、在django project中创建 static文件夹，需要在工程的根目录自己创建static文件夹2、在工程的settings.py中配置，如下图所示： 3、前端引入，例如index.html文件，如下图所示： 4、完成以上几步以后，在views.py里面就可以用render方法进行渲染，配置好urls路径后就可以正常显示。最后感谢简书作者文章，附上链接：https://www.jianshu.com/p/bb9ae71f4a7b附上项目的效果图如下：","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"XAdmin与Django2集成体会","slug":"XAdmin与Django2集成体会","date":"2019-07-25T09:16:21.000Z","updated":"2019-07-25T09:36:28.939Z","comments":true,"path":"2019/07/25/XAdmin与Django2集成体会/","link":"","permalink":"https://yingjunyu.github.io/2019/07/25/XAdmin与Django2集成体会/","excerpt":"","text":"XAdmin与Django集成体会xadmin是比较符合国人习惯的一个后台管理的界面，在与django2集成的时候还是碰到了很多问题，不过后来都解决，现在简单列一下： 1、安装：网上这方面的文档比较多，比较靠谱的还是github上作者自己写的安装方法：pip install:https://codeload.github.com/sshwsfc/xadmin/zip/django2。 附上作者的github地址：https://github.com/sshwsfc/xadmin 2、配置：主要修改的地方一个是setting.py和urls.pysettiong.py修改如下 urls.py修改如下： 3、应用：首先执行 python manage.py migrate命令，然后就可以启动服务器了，python manage.py runserver。再就是进入后台管理界面，大致能看到如下风格的界面效果： 4、xadmin的bug问题：在应用过程中碰到了添加用户小插件报错的情况，查了资料以后主要需要修改site-packages\\xadmin\\views下的dashboard.py中的render方法，具体改成下面的内容： 以上就是集成以后的总结，基本上来说，后续的应用网上的文章很多，官方也有自己的文档，参照来做即可。","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"Scrapy初步使用","slug":"Scrapy初步使用","date":"2019-07-24T09:37:40.000Z","updated":"2019-07-24T10:00:33.659Z","comments":true,"path":"2019/07/24/Scrapy初步使用/","link":"","permalink":"https://yingjunyu.github.io/2019/07/24/Scrapy初步使用/","excerpt":"","text":"Scrapy初步使用","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"Cordova 插件大全","slug":"插件大全","date":"2018-12-17T09:16:21.000Z","updated":"2018-12-17T09:23:02.583Z","comments":true,"path":"2018/12/17/插件大全/","link":"","permalink":"https://yingjunyu.github.io/2018/12/17/插件大全/","excerpt":"","text":"cordova 插件大全https://www.jianshu.com/p/642c9be55446","categories":[],"tags":[{"name":"IONIC","slug":"IONIC","permalink":"https://yingjunyu.github.io/tags/IONIC/"}]},{"title":"Django2初步使用-20181217","slug":"Django2初步使用-20181217","date":"2018-12-17T01:28:32.000Z","updated":"2018-12-17T02:38:10.346Z","comments":true,"path":"2018/12/17/Django2初步使用-20181217/","link":"","permalink":"https://yingjunyu.github.io/2018/12/17/Django2初步使用-20181217/","excerpt":"","text":"Django2初步使用之前跟着教程学习过Django1的使用，对于路由、分库什么的都没有做深入研究。说来惭愧，现在真的是浅尝即止。话虽如此，还是腆着脸来写一下这段时间初步尝试Django2的一些体会，见笑了。 1. Django2的路由这点我比较喜欢，之前的Django1只能用正则表达式的方式来写，虽说正则表达式看上去不难，但是我自己觉得比较晦涩，不太喜欢这种表达方式（除非是做爬虫），Django2在这方面有了选择，可以采用 path(‘index/‘, index) 的方式，有了这种方式，至少对我来说感觉方便了很多。至于路由的选择依然是MTV模式，没有什么改变。 2. 多应用分库这是在实际生产中必然会用到的，其实应该和Django1一样，只不过在之前的自学中自己没有去实践过，在这次的学习中实践了一下，所以就写在这里了，大致来说的步骤是： 1 用manange.py生成应用，并且在settings.py的install_app小节注册一下新建的的应用。 2 在urls.py里面引入生成的应用view类，然后配置路由（更好的做法自然应该是在应用下面配置urls，然后引入。） 3 可选步骤，一般情况下，执行完上述步骤后就可以完成多应用分库的操作，只不过这时的template目录是在站点的根目录下的，如果想每个独立的应用都有自己的template文件夹的话，需要做一是将template文件夹移到应用的根目录下，然后还需要修改站点的settings.py里面的内容，在’DIRS’:后面写上如下的内容。 1234TEMPLATES = [ &#123; &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;, &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates/&apos;)] 当然还可以做的更好，就是把所有的应用统一放到一个目录下，比如apps目录，这需要继续修改settings.py关于路径的设置内容。不过这个没有实践，就不写了。 3. 编辑器Ckeditor的使用这个编辑器做为一般建站可能都会用上吧，大致的使用步骤是： 1 安装，pip install django-ckeditor 需要上传图片的话，还需要安装pillow。 2 在settings.py里设置，需要设置的内容是：1） 在install_app小节里面增加 ‘ckeditor_uploader’和’ckeditor’ 内容，前者用来上传图片、多媒体文件等用。 2） 增加如下的配置代码 123456789101112131415161718192021222324CKEDITOR_JQUERY_URL =&apos;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&apos;CKEDITOR_IMAGE_BACKEND = &apos;pillow&apos;CKEDITOR_UPLOAD_PATH = &apos;uploads/&apos;# Static files (CSS, JavaScript, Images)# https://docs.djangoproject.com/en/2.0/howto/static-files/CKEDITOR_CONFIGS = &#123; &apos;default&apos;: &#123; &apos;toolbar&apos;: ( [&apos;div&apos;,&apos;Source&apos;,&apos;-&apos;,&apos;Save&apos;,&apos;NewPage&apos;,&apos;Preview&apos;,&apos;-&apos;,&apos;Templates&apos;], [&apos;Cut&apos;,&apos;Copy&apos;,&apos;Paste&apos;,&apos;PasteText&apos;,&apos;PasteFromWord&apos;,&apos;-&apos;,&apos;Print&apos;,&apos;SpellChecker&apos;,&apos;Scayt&apos;], [&apos;Undo&apos;,&apos;Redo&apos;,&apos;-&apos;,&apos;Find&apos;,&apos;Replace&apos;,&apos;-&apos;,&apos;SelectAll&apos;,&apos;RemoveFormat&apos;], [&apos;Form&apos;,&apos;Checkbox&apos;,&apos;Radio&apos;,&apos;TextField&apos;,&apos;Textarea&apos;,&apos;Select&apos;,&apos;Button&apos;, &apos;ImageButton&apos;,&apos;HiddenField&apos;], [&apos;Bold&apos;,&apos;Italic&apos;,&apos;Underline&apos;,&apos;Strike&apos;,&apos;-&apos;,&apos;Subscript&apos;,&apos;Superscript&apos;], [&apos;NumberedList&apos;,&apos;BulletedList&apos;,&apos;-&apos;,&apos;Outdent&apos;,&apos;Indent&apos;,&apos;Blockquote&apos;], [&apos;JustifyLeft&apos;,&apos;JustifyCenter&apos;,&apos;JustifyRight&apos;,&apos;JustifyBlock&apos;], [&apos;Link&apos;,&apos;Unlink&apos;,&apos;Anchor&apos;], [&apos;Image&apos;,&apos;Flash&apos;,&apos;Table&apos;,&apos;HorizontalRule&apos;,&apos;Smiley&apos;,&apos;SpecialChar&apos;,&apos;PageBreak&apos;], [&apos;Styles&apos;,&apos;Format&apos;,&apos;Font&apos;,&apos;FontSize&apos;], [&apos;TextColor&apos;,&apos;BGColor&apos;], [&apos;Maximize&apos;,&apos;ShowBlocks&apos;,&apos;-&apos;,&apos;About&apos;, &apos;pbckcode&apos;], ), &#125;&#125; 上面的congfig代码是我找的网上的例子，默认情况下的ck是不会打开媒体文件上传的选项的，需要在congfig里面配置，具体是哪一行起作用，没有研究，不敢乱说。 除此之外，还需要对static路径和media路径进行设置，代码如下： 123456789STATIC_URL = &apos;/static/&apos;#STATIC_ROOT = os.path.join(BASE_DIR,&apos;static/&apos;)STATICFILES_DIRS = ( os.path.join(BASE_DIR, &quot;static&quot;),)MEDIA_URL = &apos;/media/&apos;MEDIA_ROOT = os.path.join(BASE_DIR, &quot;media&quot;)#CKEDITOR_UPLOAD_PATH = &apos;uploads/&apos; 上面的代码其实和django1使用ck差不多。 3） 同步静态文件，用 python manage.py collectstatic 命令同步静态文件。完成上述步骤后，就可以测试一下效果，如果代码都写的没问题，站点也可以跑起来的话，多半会有一个问题，就是图片上传成功，但是在ck编辑器内和页面上都无法显示，反正我是碰到了这个问题的，就算从github上面下载的完整的例子也有这个问题。最后还是求助网络和ck的官方文档，还需要在 urlpatterns = [……] 的最后写上 + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)就可以了。 4. 和Pyecharts的集成首先来说，这个是有官方帮助可以看的，例子也写得比较详细。这里就不赘述了，我自己实践的时候只是碰到了一个问题，就是某个页面上有其他内容的时候，直接放上官方文档的例子没有任何效果，没有深入研究什么原因，我采取了比较简单粗暴的解决方法，直接用了一个iframe加载。 大概就是以上这几点吧，也没做太多的实践，不敢多写，就先到这吧。:)","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"利用pyecharts制作图表","slug":"利用pyecharts制作图表","date":"2018-08-16T02:55:23.000Z","updated":"2018-08-16T03:07:33.560Z","comments":true,"path":"2018/08/16/利用pyecharts制作图表/","link":"","permalink":"https://yingjunyu.github.io/2018/08/16/利用pyecharts制作图表/","excerpt":"","text":"利用Pyecharts制作图表pyecharts是基于Echart图表的一个类库，主要基于Web浏览器进行显示，绘制的图形比较多，包括折线图、柱状图、饼图、漏斗图、地图、极坐标图等，代码量少，而且很灵活，绘制出来的图形也很美观。 1. 安装pyecharts1pip install pyecharts 2. 一般性应用（制作柱状图为例）1234567from pyecharts import Barattr = [&apos;JAVA&apos;, &apos;C++&apos;, &apos;C#&apos;, &apos;PYTHONE&apos;]value = [&apos;100&apos;, &apos;120&apos;, &apos;85&apos;, &apos;150&apos;]bar = Bar(&quot;柱状图&quot;, &quot;应用率&quot;)bar.add(&quot;编程语言&quot;, attr, value, is_label_show=True)bar.render() 以上代码在执行以后会在代码所在的目录下生成一个render.html文件，在浏览器里打开这个文件就可以看到一个柱状图的效果了。","categories":[],"tags":[{"name":"PYTHON","slug":"PYTHON","permalink":"https://yingjunyu.github.io/tags/PYTHON/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-08-16T01:24:18.987Z","updated":"2018-08-16T01:24:18.987Z","comments":true,"path":"2018/08/16/hello-world/","link":"","permalink":"https://yingjunyu.github.io/2018/08/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}